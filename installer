#!/bin/bash

#################################################
#
# Lazy Server
# Version 1.2a
# Copyright 2018, Veit <mail@geekmonkey.de>
#
# Tested: 28.03.2018
#
#################################################

## Configure

##### DO NOT EDIT BELOW THIS LINE  ####

## xf0 Default
mydir_installer="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
myname=$(basename $0)

# Colors
green='\e[92m'
red='\e[31m'
blue='\e[96m'
nc='\033[0m'

##### Start Script  ####

cmdline() {
    local arg=
    for arg
    do
        local delim=""
        case "$arg" in
            --help)           args="${args}-h ";;
            --debug)          args="${args}-x ";;
            --screen)         args="${args}-s ";;
            *) [[ "${arg:0:1}" == "-" ]] || delim="\""
                args="${args}${delim}${arg}${delim} ";;
        esac
    done
    eval set -- $args

    while getopts "hxs" option
    do
         case $option in
         h)
             usage
             exit 0
             ;;
         x)
             exec 5>dev-debug.log
             BASH_XTRACEFD="5"
             set -x
             ;;
         s)
             out='/dev/tty'
             ;;
        esac
    done
    return 0
}

usage() {
    cat <<- EOF
    ----------------------------------------------------
    Usage: $myname options
    Bla
    Options:
       -s  --screen		show terminal output
       -x  --debug		debug (dev-debug.log)
       -h  --help		show this help
    Examples:
       Debug script :
       $myname -x
       $myname --debug
EOF
}

# Config

lazy_scripts="$(cd $mydir_installer/scripts && ls)"

config_read() { #syntax <config.cfg> <section>
cfg_content=$(sed -n "/\[$2\]/,/\[end]/p" $1 | sed -r '/[^=]+=[^=]+/!d' | sed -r 's/\s+=\s/=/g')
for var in $cfg_content
  do
    export ${var//\"}
  done
}

config_install() {
    config_read $mydir_installer/$cfg_file $1
    if [ "${!1}" = true ]; then
      export xf0_installer="true"
      $mydir_installer/scripts/$1
    fi
}

config_check() {
for var in $lazy_scripts
  do
    config_install $var
  done

}

check_config() { # not in use
  if [ -f $1 ]; then
    config_check
  else
    echo -e "${red}WARNING:${nc} Cannot find config file ($1)"
  fi
}

lazy_menu_choose_config() {
  cfg_files=$(cd $mydir_installer; ls -1 *.cfg)
  for i in $cfg_files
  do
      cfg_list+=("${i}" " " off)
  done
  get_cfg=$(whiptail --title "Choose Config" --radiolist \
  "Please choose your config file from the list below: \
\n\nNotice: Make sure to select (spacebar) the config! Otherwise the script will not work! " 15 60 6 \
  "${cfg_list[@]}" 3>&1 1>&2 2>&3)
  cfg_file=${get_cfg//\"}
}

# Create Config

lazy_menue_create_config() {

  cfg_file_name=$(whiptail --inputbox "Choose name for your config." 8 78 xf0.de \
              --title "Configure: Create Config" 3>&1 1>&2 2>&3)
  cfg_file="${cfg_file_name}.cfg"
  cp $mydir_installer/lazy.cfg.sample $mydir_installer/$cfg_file

  whiptail --title "Create Config" --checklist --separate-output "Choose:" 15 60 6 \
  "Basic Configuration" "" on \
  "Secure Server" "" on \
  "LEMP Stack" "" on \
  "Cache (Redis, APCu, OPcache)" "" on \
  "NGiNX (standalone)" "" off 2>results_main

  while read choice
  do
	  case $choice in
	    Basic*) define_deb
		  ;;
		  Secure*) define_secure
		  ;;
		  LEMP*) define_lemp
		  ;;
		  NGiNX*) define_ngx
		  ;;
      Cache*) define_cache
		  ;;
		  *)
		  ;;
	  esac
  done < results_main
}

define_deb() {
  lazy_deb="true"
  servername=$(whiptail --inputbox "Choose servername." 8 78 xf0 \
              --title "Configure: Debian Basic" 3>&1 1>&2 2>&3)
  hostname=$(whiptail --inputbox "Choose hostname." 8 78 xf0.de \
              --title "Configure: Debian Basic" 3>&1 1>&2 2>&3)
  if (whiptail --title "Configure: Debian Basic" --yesno "Do you want to instal postfix? (Send-Only)" 8 78) then
      install_postfix="true"
  else
      install_postfix="false"
  fi
  # export to config
  sed -i 's/^lazy_deb.*/'"lazy_deb = \"$lazy_deb\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^servername.*/'"servername = \"$servername\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^hostname.*/'"hostname = \"$hostname\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^install_postfix.*/'"install_postfix = \"$install_postfix\"/g"  $mydir_installer/$cfg_file
}

define_secure() {
  lazy_secure="true"
  whiptail --title "Configure: Secure" --checklist --separate-output "Select the packages that you want to install:" 15 60 6 \
  "Fail2Ban" "" on \
  "Apticron" "" on \
  "Rootkit Hunter" "" on 2>results
  while read choice
  do
	  case $choice in
	    Fail2Ban*) fail2ban="true"
		  ;;
		  Apticron*) apticron="true"
		  ;;
		  Rootkit*) rkhunter="true"
		  ;;
		  *)
		  ;;
	  esac
  done < results
  hostname=$(whiptail --inputbox "Choose hostname." 8 78 xf0.de \
              --title "Configure: Secure" 3>&1 1>&2 2>&3)
  your_email=$(whiptail --inputbox "Choose email to receive notification." 8 78 mail@xf0.de \
              --title "Configure: Secure" 3>&1 1>&2 2>&3)
  ssh_port=$(whiptail --inputbox "Choose SSH Port." 8 78 22448 \
              --title "Configure: Secure" 3>&1 1>&2 2>&3)
  # export to config
  sed -i 's/^lazy_secure.*/'"lazy_secure = \"$lazy_secure\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^fail2ban.*/'"fail2ban = \"$fail2ban\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^apticron.*/'"apticron = \"$apticron\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^rkhunter.*/'"rkhunter = \"$rkhunter\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^hostname.*/'"hostname = \"$hostname\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^your_email.*/'"your_email = \"$your_email\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^ssh_port.*/'"ssh_port = \"$ssh_port\"/g"  $mydir_installer/$cfg_file
}

define_lemp() {
  lazy_lemp="true"
  php=$(whiptail --inputbox "Choose php version (default: 7.2).Make sure so check the source list in $mydir_installer/scripts/lazy_lemp, if you change it." 8 78 7.2 \
              --title "Configure: LEMP" 3>&1 1>&2 2>&3)
  mariadb=$(whiptail --inputbox "Choose mariadb version (default: 10.2). Make sure so check the source list in $mydir_installer/scripts/lazy_lemp, if you change it." 8 78 10.2 \
              --title "Configure: LEMP" 3>&1 1>&2 2>&3)
  sql_nopw="false"
  sql_root_pw=$(whiptail --passwordbox "Please enter your MySQL password" 8 78 --title "Configure: LEMP" 3>&1 1>&2 2>&3)
  if (whiptail --title "Configure: LEMP" --yesno "Do you want to install phpMyAdmin?" 8 78) then
      install_pma="true"
  else
      install_pma="false"
  fi
  if [ "$install_pma" = "true" ]; then
  pma_dir=$(whiptail --inputbox "Choose path for phpMyAdmin webinterface." 8 78 /var/www/phpmyadmin \
              --title "Configure: LEMP" 3>&1 1>&2 2>&3)
  fi
# export to config
  export_pma_dir="${pma_dir//\//\\/}"
  sed -i 's/^lazy_lemp.*/'"lazy_lemp = \"$lazy_lemp\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^php.*/'"php = \"$php\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^mariadb.*/'"mariadb = \"$mariadb\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^install_pma.*/'"install_pma = \"$install_pma\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^pma_dir.*/'"pma_dir = \"$export_pma_dir\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^sql_nopw.*/'"sql_nopw = \"$sql_nopw\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^sql_root_pw.*/'"sql_root_pw = \"$sql_root_pw\"/g"  $mydir_installer/$cfg_file
}

define_ngx() {
  lazy_ngx="true"
  sed -i 's/^lazy_ngx.*/'"lazy_ngx = \"$lazy_ngx\"/g"  $mydir_installer/$cfg_file
}

define_cache() {
  lazy_xcache="true"
  whiptail --title "Configure: Cache" --checklist --separate-output "Choose:" 15 60 6 \
  "Redis Server" "" on \
  "APCu Modul" "" on \
  "OPcache Modul" "" on 2>results
  while read choice
  do
	  case $choice in
	    Redis*) redis="true"
		  ;;
		  APCu*) apcu="true"
		  ;;
		  OPcache*) opcache="true"
		  ;;
		  *)
		  ;;
	  esac
  done < results
  if (whiptail --title "Configure: Redis Server" --yesno "Should Redis listen on a UNIX Socket? (default)" 8 78) then
      redis_tcp="false"
  else
      redis_tcp="true"
  fi
  if [ "$redis_tcp" = "true" ]; then
  pma_dir=$(whiptail --inputbox "Choose TCP Port." 8 78 6379 \
              --title "Configure: Redis Server" 3>&1 1>&2 2>&3)
  fi
  # export to config
  sed -i 's/^lazy_xcache.*/'"lazy_xcache = \"$lazy_xcache\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^redis =.*/'"redis = \"$redis\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^redis_tcp.*/'"redis_tcp = \"$redis_tcp\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^apcu.*/'"apcu = \"$apcu\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^opcache.*/'"opcache = \"$opcache\"/g"  $mydir_installer/$cfg_file
  sed -i 's/^redis_port.*/'"redis_port = \"$redis_port\"/g"  $mydir_installer/$cfg_file
}

# End: Create Config

config_check_new() {
if (whiptail --title "Configure: done" --yesno "Do you want to run the installer with your new config ($cfg_file)? Otherwise it will be saved for later." 8 78) then
      cfg_file="$cfg_file"
      config_check
  else
      exit 0
  fi
}

config_check_old() {
  cfg_file="$cfg_file"
  config_check
}

lazy_menu() {
    whiptail \
    --title "Lazy_Server" \
    --msgbox "Welcome to the lazy_server installer. \n\nThere are two options to set up and configure your server. \
You can either load one of your config files, or if you dont't have one, you can configure \
one in the next steps. \n \nPlease press OK to continue." 15 60 4

    lazy_option=$(whiptail --title "Lazy Server" --menu "Make your choice" 15 60 4 \
        "1" "load config file" \
        "2" "create new config file" 3>&1 1>&2 2>&3)
    case $lazy_option in
        1)
            echo ""
            lazy_menu_choose_config
            config_check_old
            echo ""

        ;;
        2)
            echo ""
            lazy_menue_create_config
            config_check_new
            echo ""
        ;;
    esac
}

main() {
  cmdline $@
  lazy_menu
}

main
